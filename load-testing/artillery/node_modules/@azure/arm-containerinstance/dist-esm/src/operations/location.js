/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Location operations. */
export class LocationImpl {
    /**
     * Initialize a new instance of the class Location class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the usage for a subscription
     * @param location The identifier for the physical azure location.
     * @param options The options parameters.
     */
    listUsage(location, options) {
        const iter = this.listUsagePagingAll(location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listUsagePagingPage(location, options, settings);
            }
        };
    }
    listUsagePagingPage(location, options, _settings) {
        return __asyncGenerator(this, arguments, function* listUsagePagingPage_1() {
            let result;
            result = yield __await(this._listUsage(location, options));
            yield yield __await(result.value || []);
        });
    }
    listUsagePagingAll(location, options) {
        return __asyncGenerator(this, arguments, function* listUsagePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listUsagePagingPage(location, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the list of cached images on specific OS type for a subscription in a region.
     * @param location The identifier for the physical azure location.
     * @param options The options parameters.
     */
    listCachedImages(location, options) {
        const iter = this.listCachedImagesPagingAll(location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listCachedImagesPagingPage(location, options, settings);
            }
        };
    }
    listCachedImagesPagingPage(location, options, settings) {
        return __asyncGenerator(this, arguments, function* listCachedImagesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listCachedImages(location, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listCachedImagesNext(location, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listCachedImagesPagingAll(location, options) {
        return __asyncGenerator(this, arguments, function* listCachedImagesPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listCachedImagesPagingPage(location, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get the list of CPU/memory/GPU capabilities of a region.
     * @param location The identifier for the physical azure location.
     * @param options The options parameters.
     */
    listCapabilities(location, options) {
        const iter = this.listCapabilitiesPagingAll(location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listCapabilitiesPagingPage(location, options, settings);
            }
        };
    }
    listCapabilitiesPagingPage(location, options, settings) {
        return __asyncGenerator(this, arguments, function* listCapabilitiesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listCapabilities(location, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listCapabilitiesNext(location, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listCapabilitiesPagingAll(location, options) {
        return __asyncGenerator(this, arguments, function* listCapabilitiesPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listCapabilitiesPagingPage(location, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Get the usage for a subscription
     * @param location The identifier for the physical azure location.
     * @param options The options parameters.
     */
    _listUsage(location, options) {
        return this.client.sendOperationRequest({ location, options }, listUsageOperationSpec);
    }
    /**
     * Get the list of cached images on specific OS type for a subscription in a region.
     * @param location The identifier for the physical azure location.
     * @param options The options parameters.
     */
    _listCachedImages(location, options) {
        return this.client.sendOperationRequest({ location, options }, listCachedImagesOperationSpec);
    }
    /**
     * Get the list of CPU/memory/GPU capabilities of a region.
     * @param location The identifier for the physical azure location.
     * @param options The options parameters.
     */
    _listCapabilities(location, options) {
        return this.client.sendOperationRequest({ location, options }, listCapabilitiesOperationSpec);
    }
    /**
     * ListCachedImagesNext
     * @param location The identifier for the physical azure location.
     * @param nextLink The nextLink from the previous successful call to the ListCachedImages method.
     * @param options The options parameters.
     */
    _listCachedImagesNext(location, nextLink, options) {
        return this.client.sendOperationRequest({ location, nextLink, options }, listCachedImagesNextOperationSpec);
    }
    /**
     * ListCapabilitiesNext
     * @param location The identifier for the physical azure location.
     * @param nextLink The nextLink from the previous successful call to the ListCapabilities method.
     * @param options The options parameters.
     */
    _listCapabilitiesNext(location, nextLink, options) {
        return this.client.sendOperationRequest({ location, nextLink, options }, listCapabilitiesNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listUsageOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/usages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UsageListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listCachedImagesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/cachedImages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CachedImagesListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listCapabilitiesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/capabilities",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CapabilitiesListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listCachedImagesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CachedImagesListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listCapabilitiesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CapabilitiesListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=location.js.map