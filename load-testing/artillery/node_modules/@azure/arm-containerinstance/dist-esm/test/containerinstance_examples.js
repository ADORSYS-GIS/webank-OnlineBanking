/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { ContainerInstanceManagementClient } from "../src/containerInstanceManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("ContainerInstance test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let containerGroupName;
    let containerInstanceName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new ContainerInstanceManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus2";
            resourceGroup = "myjstest";
            containerGroupName = "mycontainerGroupxxx";
            containerInstanceName = "my-containerinstancexx";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("containerGroups create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.containerGroups.beginCreateOrUpdateAndWait(resourceGroup, containerGroupName, {
                location: location,
                identity: {
                    type: "SystemAssigned"
                },
                containers: [
                    {
                        name: containerInstanceName,
                        command: [],
                        environmentVariables: [],
                        image: "nginx",
                        ports: [
                            {
                                port: 80
                            }
                        ],
                        resources: {
                            requests: {
                                cpu: 1,
                                memoryInGB: 1.5,
                                // gpu: {
                                //   count: 1,
                                //   sku: "K80"
                                // }
                            }
                        },
                        volumeMounts: [
                            {
                                name: "empty-volume",
                                mountPath: "mnt/mydir"
                            }
                        ]
                    }
                ],
                diagnostics: {
                    logAnalytics: {
                        workspaceId: "workspaceid",
                        workspaceKey: "workspaceKey"
                    }
                },
                osType: "Linux",
                restartPolicy: "OnFailure",
                volumes: [
                    {
                        name: "empty-volume",
                        emptyDir: {}
                    }
                ]
            }, testPollingOptions);
            assert.equal(res.name, containerGroupName);
        });
    }).timeout(3600000);
    it("containerGroups get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.containerGroups.get(resourceGroup, containerGroupName);
            assert.equal(res.name, containerGroupName);
        });
    });
    it("containerGroups list test", function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.containerGroups.listByResourceGroup(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("containerGroups delete test", function () {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.containerGroups.beginDeleteAndWait(resourceGroup, containerGroupName);
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.containerGroups.listByResourceGroup(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=containerinstance_examples.js.map