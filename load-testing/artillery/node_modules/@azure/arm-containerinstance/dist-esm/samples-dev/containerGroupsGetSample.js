/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ContainerInstanceManagementClient } from "@azure/arm-containerinstance";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Gets the properties of the specified container group in the specified subscription and resource group. The operation returns the properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
 *
 * @summary Gets the properties of the specified container group in the specified subscription and resource group. The operation returns the properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
 * x-ms-original-file: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2023-05-01/examples/ContainerGroupsGetPriority.json
 */
function containerGroupsGetWithPriority() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERINSTANCE_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["CONTAINERINSTANCE_RESOURCE_GROUP"] || "demo";
        const containerGroupName = "demo1";
        const credential = new DefaultAzureCredential();
        const client = new ContainerInstanceManagementClient(credential, subscriptionId);
        const result = yield client.containerGroups.get(resourceGroupName, containerGroupName);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Gets the properties of the specified container group in the specified subscription and resource group. The operation returns the properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
 *
 * @summary Gets the properties of the specified container group in the specified subscription and resource group. The operation returns the properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
 * x-ms-original-file: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2023-05-01/examples/ContainerGroupsGet_Failed.json
 */
function containerGroupsGetFailed() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERINSTANCE_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["CONTAINERINSTANCE_RESOURCE_GROUP"] || "demo";
        const containerGroupName = "demo1";
        const credential = new DefaultAzureCredential();
        const client = new ContainerInstanceManagementClient(credential, subscriptionId);
        const result = yield client.containerGroups.get(resourceGroupName, containerGroupName);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Gets the properties of the specified container group in the specified subscription and resource group. The operation returns the properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
 *
 * @summary Gets the properties of the specified container group in the specified subscription and resource group. The operation returns the properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
 * x-ms-original-file: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2023-05-01/examples/ContainerGroupsGet_Succeeded.json
 */
function containerGroupsGetSucceeded() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERINSTANCE_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["CONTAINERINSTANCE_RESOURCE_GROUP"] || "demo";
        const containerGroupName = "demo1";
        const credential = new DefaultAzureCredential();
        const client = new ContainerInstanceManagementClient(credential, subscriptionId);
        const result = yield client.containerGroups.get(resourceGroupName, containerGroupName);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        containerGroupsGetWithPriority();
        containerGroupsGetFailed();
        containerGroupsGetSucceeded();
    });
}
main().catch(console.error);
//# sourceMappingURL=containerGroupsGetSample.js.map